from sympy import *
from sympy.simplify.fu import TR111
import numpy as np

def christoffel(x, g):
  '''
  Returns the non-zero Christoffel symbols of a given metric tensor g and coordinate vector x.
  '''
  christoffels = {}
  for mu in range(g.shape[0]):
    for alpha in range(g.shape[0]):
      for beta in range(g.shape[0]):
        for gamma in range(g.shape[0]):
          Gamma = simplify(Rational(1, 2)*g.inv()[mu, gamma]*(Derivative(g[alpha, gamma], x[beta]) + Derivative(g[gamma, beta], x[alpha]) - Derivative(g[alpha, beta], x[gamma])))
          if Gamma != 0:
            symbol = Symbol(f'\\Gamma^{x[mu]}_{x[alpha]}_{x[beta]}')
            if symbol not in christoffels.keys():
              christoffels[symbol] = Gamma
            else: christoffels[symbol] = christoffels[symbol] + Gamma
  init_printing()
  return TR111(trigsimp(christoffels))

def riemann(x, g):
  '''
  Returns the non-zero compoents of the Riemann tensor of a given metric tensor g and coordinate vector x.
  '''
  christoffels = christoffel(x, g)
  riemanns = {}
  for mu in range(g.shape[0]):
    for nu in range(g.shape[0]):
      for rho in range(g.shape[0]):
        for sigma in range(g.shape[0]):
          term = []
          for gamma in range(g.shape[0]):
            A = Symbol(f'\\Gamma^{x[rho]}_{x[nu]}_{x[sigma]}')
            B = Symbol(f'\\Gamma^{x[rho]}_{x[mu]}_{x[sigma]}')
            C = Symbol(f'\\Gamma^{x[rho]}_{x[mu]}_{x[gamma]}')
            D = Symbol(f'\\Gamma^{x[gamma]}_{x[nu]}_{x[sigma]}')
            E = Symbol(f'\\Gamma^{x[rho]}_{x[nu]}_{x[gamma]}')
            F = Symbol(f'\\Gamma^{x[gamma]}_{x[mu]}_{x[sigma]}')
            if A not in christoffels.keys(): a = 0
            else: a = christoffels[A]
            if B not in christoffels.keys(): b = 0
            else: b = christoffels[B]
            if C not in christoffels.keys(): c = 0
            else: c = christoffels[C]
            if D not in christoffels.keys(): d = 0
            else: d = christoffels[D]
            if E not in christoffels.keys(): e = 0
            else: e = christoffels[E]
            if F not in christoffels.keys(): f = 0
            else: f = christoffels[F]
            term.append(c*d - e*f)
          R = simplify(Derivative(a, x[mu]) - Derivative(b, x[nu]) + np.sum(term))
          if R != 0:
            symbol = Symbol(f'R^{x[rho]}_{x[sigma]}_{x[mu]}_{x[nu]}')
            riemanns[symbol] = R
  init_printing()
  return TR111(trigsimp(riemanns))

def ricci(x, g):
  '''
  Returns both the non-zero compoents of the Ricci tensor and the Ricci scalar of a given metric tensor g and coordinate vector x.
  '''
  riemanns = riemann(x, g)
  riccis = {}
  scalar = []
  for mu in range(g.shape[0]):
    for nu in range(g.shape[0]):
      term = []
      for rho in range(g.shape[0]):
        A = Symbol(f'R^{x[rho]}_{x[mu]}_{x[rho]}_{x[nu]}')
        if A not in riemanns.keys(): a = 0
        else: a = riemanns[A]
        term.append(a)
      R = simplify(np.sum(term))
      if R != 0:
        symbol = Symbol(f'R_{x[mu]}_{x[nu]}')
        riccis[symbol] = R
  for mu in range(g.shape[0]):
    for nu in range(g.shape[0]):
      A = Symbol(f'R_{x[mu]}_{x[nu]}')
      if A not in riccis.keys(): a = 0
      else: a = riccis[A]
      scalar.append(g.inv()[mu, nu]*a)
  ricciscalar = simplify(np.sum(scalar))
  init_printing()
  return TR111(trigsimp(riccis)), TR111(trigsimp(ricciscalar))
